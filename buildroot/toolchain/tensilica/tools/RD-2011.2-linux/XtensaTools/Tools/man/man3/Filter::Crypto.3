.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Filter::Crypto 3"
.TH Filter::Crypto 3 "2005-03-03" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Filter::Crypto \- Create runnable Perl files encrypted with OpenSSL libcrypto
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # Encrypt a Perl script using the crypt_file script; run it as usual:
\&    $ crypt_file --in-place hello.pl
\&    $ hello.pl
.Ve
.PP
.Vb 4
\&    # Create a PAR archive containing an encrypted Perl script; run it as usual:
\&    # (This example assumes that you also have PAR installed)
\&    $ pp -f Crypto -M Filter::Crypto::Decrypt -o hello hello.pl
\&    $ hello
.Ve
.PP
.Vb 3
\&    # Display the Filter-Crypto distribution version number:
\&    use Filter::Crypto;
\&    print "This is Filter-Crypto $Filter::Crypto::VERSION\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Filter-Crypto distribution provides the means to convert your Perl files
into an encrypted, yet still runnable, format to hide the source code from
casual prying eyes.
.PP
This is achieved using a Perl source code filter.  The encrypted files, produced
using the Filter::Crypto::CryptFile module
automatically have one (unencrypted) line added to the start of them which loads
the Filter::Crypto::Decrypt module.  The latter is a
Perl source code filter which decrypts the remaining (encrypted) part of the
Perl file on-the-fly when it is run.  See perlfilter if you want to know more
about how Perl source code filters work.
.PP
Encrypted files can also be produced more conveniently using the \fBcrypt_file\fR
script, or (if you also have the \s-1PAR\s0 module available) using the
PAR::Filter::Crypto module.  The latter can be utilized
by the standard \s-1PAR\s0 tools to produce \s-1PAR\s0 archives in which your Perl
files are encrypted.
.PP
The actual encryption and decryption is performed using one of the symmetric
cipher algorithms provided by the OpenSSL libcrypto library.  The \s-1EVP\s0 library
high-level interface functions to the various cipher algorithms themselves are
used so that your choice of algorithm (and also what password or key to use) is
made simply by answering some questions when building this distribution.  See
the \fI\s-1INSTALL\s0\fR file for more details.
.PP
This module itself only contains this documentation and the version number of
the Filter-Crypto distribution as a whole.
.SH "WARNING"
.IX Header "WARNING"
Some people regard the whole area of Perl source code encryption as being
morally offensive, given that Perl itself is open source.  However, Perl's
Artistic License does specifically allow the distribution of Perl \*(L"as part of a
larger (possibly commercial) software distribution,\*(R" and many people producing
commercial Perl software are uneasy about distributing the source code in easily
accessible form for anyone to see, and want to take more practical action than
involving intellectual property rights lawyers.
.PP
That's where software like this comes in, but a word of warning is in order
regarding the security provided by this (and, indeed, any other) source code
decryption filter.
.PP
Some of the points below come from a discussion on the perl5\-porters mailing
list, in the thread starting here:
\&\fIhttp://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/2003\-10/msg01169.html\fR;
others are taken from the Filter::decrypt manpage.
.PP
In general, it is hopeless to try to prevent everyone from getting at the source
code, especially when it is being run in an environment that you have no control
over, and even more so when the software running it (Perl) is open source
itself.
.PP
This techinique can \fInever\fR completely hide the original unencrypted source
code from people sufficiently determined to get it.  The most it can hope for is
to hide it from casual prying eyes, and to outdo everyone who is using a
precompiled Perl (at least from \*(L"regular\*(R" sources) and everyone who isn't
knowledgeable enough to suitably modify the Perl source code before compiling
their own.
.PP
Perl source code decryption filters work by intercepting the source stream (read
from the encrypted file) and modifying it (in this case, decrypting it) before
it reaches the Perl parser.  Clearly, by the time the source reaches the parser
it must be decrypted, otherwise the script cannot be run.  This means that every
part of the script must at some stage be held in memory in an unencrypted state,
so anyone with the appropriate debugging skills will be able to get it.
.PP
If Perl was built with \s-1DEBUGGING\s0 then running the script with the Perl's \fB\-Dp\fR
command-line option makes this much easier.  Even without a \s-1DEBUGGING\s0 Perl, the
script can still be run under the Perl debugger (Perl's \fB\-d\fR command-line
option), whose \f(CW\*(C`l\*(C'\fR command will list the (decrypted) source code that was fed
to the parser.
.PP
In fact, with the introduction of the Perl compiler backend modules it is now
easy to get at the decrypted source code without any debugging skills at all.
To quote B::Deparse:
.PP
.Vb 7
\&    B::Deparse is a backend module for the Perl compiler that generates perl
\&    source code, based on the internal compiled structure that perl itself
\&    creates after parsing a program.  The output of B::Deparse won't be exactly
\&    the same as the original source, since perl doesn't keep track of comments
\&    or whitespace, and there isn't a one-to-one correspondence between perl's
\&    syntactical constructions and their compiled form, but it will often be
\&    close.
.Ve
.PP
To make debugging and deparsing more difficult, the source code decryption
filter implemented in this distribution contains checks to try to disallow the
following:
.IP "\(bu" 4
Running under a Perl that was built with \s-1DEBUGGING\s0 (\f(CW\*(C`\-DDEBUGGING\*(C'\fR);
.IP "\(bu" 4
Running under a Perl with \s-1DEBUGGING\s0 flags enabled (\fB\-D\fR or \fI$^D\fR);
.IP "\(bu" 4
Running under the Perl debugger (\fB\-d\fR);
.IP "\(bu" 4
Running under the Perl compiler backend (\fB\-MO=Deparse\fR).
.PP
You should also not use a Perl that was built with C debugging support enabled
(e.g. \fBgcc\fR's \fB\-g\fR option, or \fBcl.exe\fR's \fB/Zi\fR option) and should strip the
Perl executable to remove all symbols (e.g. \fBgcc\fR's \fB\-s\fR option).
.PP
None of the above checks are infallible, however, because unless the source code
decryption filter module is statically linked against the Perl executable then
users can always replace the Perl executable being used to run the script with
their own version, perhaps hacked in such a way as to work around the above
checks, and thus with debugging/deparsing capabilities enabled.  Such a hacked
version of the Perl executable can certainly be produced since Perl is open
source itself.
.PP
In fact, it is not difficult for suitably experienced hackers to produce a
modified Perl executable which makes it absolutely trivial for them to retrieve
the \fIoriginal\fR unencrypted source code with comments, whitespace and all (i.e.
not just a deparsed reconstruction of it).  One example that was mentioned in
the perl5\-porters thread cited above is to modify the Perl executable to simply
print each line of the decrypted source stream that is fed to the parser, rather
than parsing and running it!
.PP
A typical hacker's opinion of all this is perhaps the following delightful
message which I received off-list during that perl5\-porters thread from someone
who shall remain anonymous:
.PP
.Vb 3
\&    "If you don't want anybody to see your source code, why don't you
\&    STICK IT UP YOUR ASS?!"
\&        -- Klortho
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
Patches, bug reports, suggestions or any other feedback are welcome.
.PP
Bugs can be reported on the \s-1CPAN\s0 Request Tracker at
\&\fIhttp://rt.cpan.org/NoAuth/ReportBug.html?Queue=Filter\-Crypto\fR.
.PP
Open bugs on the \s-1CPAN\s0 Request Tracker can be viewed at
\&\fIhttp://rt.cpan.org/NoAuth/Bugs.html?Dist=Filter\-Crypto\fR.
.PP
Please test this distribution.  See \s-1CPAN\s0 Testers at \fIhttp://testers.cpan.org/\fR
for details of how to get involved.
.PP
Previous test results on \s-1CPAN\s0 Testers can be viewed at
\&\fIhttp://testers.cpan.org/search?request=dist&dist=Filter\-Crypto\fR.
.PP
Please rate this distribution on \s-1CPAN\s0 Ratings at
\&\fIhttp://cpanratings.perl.org/rate/?distribution=Filter\-Crypto\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBcrypt_file\fR;
.PP
Filter::Crypto::CryptFile,
Filter::Crypto::Decrypt,
PAR::Filter::Crypto;
.PP
perlfilter;
Filter::decrypt;
.PP
\&\s-1PAR\s0;
PAR::Filter.
.PP
In particular, the Filter::decrypt module (part of the \*(L"Filter\*(R" distribution)
contains a template for a Perl source code decryption filter on which the
Filter::Crypto::Decrypt module itself was based.
.SH "AVAILABILITY"
.IX Header "AVAILABILITY"
The latest version of this module is available from \s-1CPAN\s0 (see
\&\*(L"\s-1CPAN\s0\*(R" in perlmodlib for details) at
.PP
\&\fIhttp://www.cpan.org/authors/id/S/SH/SHAY/\fR or
.PP
\&\fIhttp://www.cpan.org/modules/by\-module/Filter/\fR.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
See the \fI\s-1INSTALL\s0\fR file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Hay <shay@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2004\-2005 Steve Hay.  All rights reserved.
.SH "LICENCE"
.IX Header "LICENCE"
This module is free software; you can redistribute it and/or modify it under the
same terms as Perl itself, i.e. under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the \fI\s-1LICENCE\s0\fR file.
.SH "VERSION"
.IX Header "VERSION"
Version 1.14
.SH "DATE"
.IX Header "DATE"
01 Jun 2005
.SH "HISTORY"
.IX Header "HISTORY"
See the \fIChanges\fR file.
