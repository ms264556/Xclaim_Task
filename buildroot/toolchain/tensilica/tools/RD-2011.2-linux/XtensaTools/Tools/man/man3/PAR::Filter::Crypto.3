.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PAR::Filter::Crypto 3"
.TH PAR::Filter::Crypto 3 "2005-03-03" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
PAR::Filter::Crypto \- Encrypt Perl files in PAR archives
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Create a PAR archive containing an encrypted Perl script:
\&    $ pp -f Crypto -M Filter::Crypto::Decrypt -o hello hello.pl
.Ve
.PP
.Vb 3
\&    # Encrypt Perl source code in $code:
\&    use PAR::Filter::Crypto;
\&    PAR::Filter::Crypto->apply(\e$code);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a PAR::Filter sub-class for producing \s-1PAR\s0 archives
containing encrypted Perl files.  The PAR::Filter class itself is part of the
\&\s-1PAR\s0 distribution, and is clearly a prerequisite for using this sub\-class.
.PP
The usual means of producing a \s-1PAR\s0 archive is using the \fBpp\fR script, which also
comes with the \s-1PAR\s0 distribution.  That script's \fB\-f\fR command-line option can be
used to specify a \*(L"filter\*(R" through which to pass the Perl script being put into
the \s-1PAR\s0 archive.  Specifying this sub-class as the filter (i.e. "\fB\-f Crypto\fR")
means that the Perl script will be encrypted using the
Filter::Crypto::CryptFile module.  The resulting
encrypted script is what will be placed in the \s-1PAR\s0 archive.
.PP
Note that the encrypted script requires the
Filter::Crypto::Decrypt module in order to decrypt
itself when it is run.  The original Perl script will not have specified any
such dependency, so \fBpp\fR will not automatically include that module in the \s-1PAR\s0
archive for you.  Therefore, you must use the \fB\-M\fR option to force that module
to be included.  A typical \fBpp\fR invocation is thus something like:
.PP
.Vb 1
\&    $ pp -f Crypto -M Filter::Crypto::Decrypt -o hello hello.pl
.Ve
.PP
Of course, you must not include the Filter::Crypto::CryptFile module as well,
otherwise people to whom you distribute your \s-1PAR\s0 archive will have the means to
easily decrypt the encrypted Perl script within it!
.PP
Also note that the script is encrypted by reading its entire contents into
memory, encrypting it in memory, and then writing it out to disk.  This should
be safe for most purposes given that Perl scripts are typically not very large,
but other methods should be considered instead if this is likely to cause
out-of-memory errors due to the size of the scripts, e.g. if the scripts have
very large \f(CW\*(C`_\|_DATA_\|_\*(C'\fR sections.
.Sh "Methods"
.IX Subsection "Methods"
.ie n .IP """apply($ref)""" 4
.el .IP "\f(CWapply($ref)\fR" 4
.IX Item "apply($ref)"
Class method.  Encrypts the Perl source code referred to by \fI$ref\fR, and
replaces the code referred to by \fI$ref\fR with the encrypted code.  Thus, the
code in \fI$$ref\fR gets encrypted \*(L"in\-place\*(R".
.Sp
Returns 1 on success, or \f(CW\*(C`croak()\*(C'\fR's on failure (since the usual caller,
\&\fIPAR::Filter::apply()\fR, doesn't bother checking the return value (as of
PAR::Filter version 0.02, at least)).
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.Sh "Warnings and Error Messages"
.IX Subsection "Warnings and Error Messages"
The following diagnostic messages may be produced by this module.  They are
classified as follows (a la perldiag):
.PP
.Vb 3
\&    (W) A warning (optional).
\&    (F) A fatal error (trappable).
\&    (I) An internal error that you should never see (trappable).
.Ve
.ie n .IP "Can't close temporary filehandle after encryption: %s" 4
.el .IP "Can't close temporary filehandle after encryption: \f(CW%s\fR" 4
.IX Item "Can't close temporary filehandle after encryption: %s"
(W) The temporary file used to perform the encryption could not be closed after
use.  The system error message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR
variable is also given.
.ie n .IP "Can't rewind temporary filehandle before encryption: %s" 4
.el .IP "Can't rewind temporary filehandle before encryption: \f(CW%s\fR" 4
.IX Item "Can't rewind temporary filehandle before encryption: %s"
(F) The temporary file used to perform the encryption could not be rewound
before encrypting the source that was just written to it.  The system error
message corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "Can't rewind temporary filehandle after encryption: %s" 4
.el .IP "Can't rewind temporary filehandle after encryption: \f(CW%s\fR" 4
.IX Item "Can't rewind temporary filehandle after encryption: %s"
(F) The temporary file used to perform the encryption could not be rewound after
encrypting the source code that was written to it.  The system error message
corresponding to the standard C library \f(CW\*(C`errno\*(C'\fR variable is also given.
.ie n .IP "\fIcrypt_file()\fR failed: %s" 4
.el .IP "\fIcrypt_file()\fR failed: \f(CW%s\fR" 4
.IX Item "crypt_file() failed: %s"
(F) The \f(CW\*(C`crypt_file()\*(C'\fR function from the Filter::Crypto::CryptFile module that
is used to perform the encryption failed.  The last error message from the
Filter::Crypto::CryptFile module is also given.
.SH "EXPORTS"
.IX Header "EXPORTS"
\&\fINone\fR.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
\&\fINone\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
PAR::Filter;
.PP
Filter::Crypto.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The \f(CW\*(C`apply()\*(C'\fR method is based on that in the PAR::Filter::Bytecode module in
the \s-1PAR\s0 distribution (version 0.85), written by Autrijus Tang.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Hay <shay@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2004\-2005 Steve Hay.  All rights reserved.
.SH "LICENCE"
.IX Header "LICENCE"
This module is free software; you can redistribute it and/or modify it under the
same terms as Perl itself, i.e. under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the \fI\s-1LICENCE\s0\fR file.
.SH "VERSION"
.IX Header "VERSION"
Version 1.01
.SH "DATE"
.IX Header "DATE"
03 Mar 2005
.SH "HISTORY"
.IX Header "HISTORY"
See the \fIChanges\fR file.
