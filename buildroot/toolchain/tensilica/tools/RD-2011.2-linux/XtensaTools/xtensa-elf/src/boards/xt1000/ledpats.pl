#  ledpats.pl  --  generate C array of XT1000 16-segment LED patterns
#
#  Copyright 1999-2001 Tensilica Inc.



#  Convert one line of ASCII line drawing graphics into bits.
#
sub ledlines {
    my($line,$pat) = @_;
    my($bits) = 0;
    my($i);
    die "Invalid LED pattern line length" unless length($line) eq length($pat);
    for $i (0 .. length($pat)-1) {
        my($c) = substr($line,$i,1);
        next if $c eq ' ';
        $bits |= (1 << (length($pat) - 1 - $i));
        die "Invalid LED pattern line character '$c'" if $c ne substr($pat,$i,1);
    }
    ~$bits;		# return inverse (so that 0=on, 1=off)
}

#  Decipher an ASCII line drawing graphic depicting an LED pattern
#  and turn it into a 16-bit integer value for the LED.
#
sub ledpat {
    my($l1,$l2,$l3,$l4,$l5) = @_;
    my($v1) = ledlines($l1,' - - ');
    my($v2) = ledlines($l2,'|\|/|');
    my($v3) = ledlines($l3,' - - ');
    my($v4) = ledlines($l4,'|/|\|');
    my($v5) = ledlines($l5,' - - ');
    #  Shuffle bits around to get proper 16-bit pattern:
      (($v1 >> 3) & 0x0001)	# 0
    | (($v1 >> 0) & 0x0002)	# 1
    | (($v2 << 2) & 0x0004)	# 2
    | (($v4 << 3) & 0x0008)	# 3
    | (($v5 << 3) & 0x0010)	# 4
    | (($v5 << 2) & 0x0020)	# 5
    | (($v4 << 2) & 0x0040)	# 6
    | (($v2 << 3) & 0x0080)	# 7
    | (($v2 << 5) & 0x0100)	# 8
    | (($v2 << 7) & 0x0200)	# 9
    | (($v2 << 9) & 0x0400)	# 10
    | (($v3 <<10) & 0x0800)	# 11
    | (($v4 <<11) & 0x1000)	# 12
    | (($v4 <<11) & 0x2000)	# 13
    | (($v4 <<11) & 0x4000)	# 14
    | (($v3 <<12) & 0x8000);	# 15
}

#  Format an LED definition line into one line
#  of a C constant integer array that describes those LEDs.
#  Calls ledpat() to decipher the line-drawing graphics.
#
sub ledrow {
    my($nchars) = ($#_+1) / 6;		# number of LED chars to encode as C integer constants
    my($i,$j,$pattern);
    print "/*";
    for( $i = 0; $i < $nchars; $i++ ) {
        my($w) = 8 - length($_[$i]);
        print " " x ($w/2), $_[$i], " " x (($w+1)/2);
    }
    print "*/\n";
    for $j (1 .. 5) {
        print "/*";
        for( $i = 0; $i < $nchars; $i++ ) {
            print " $_[$i+$nchars*$j]  ";
        }
        print "*/\n";
    }
    print " ";
    for( $i = 0; $i < $nchars; $i++ ) {
        my(@grafx) = ();
        for $j (1 .. 5) {push(@grafx,$_[$i+$nchars*$j]);}
        printf " 0x%04X,", ledpat(@grafx);
    }
    print "\n\n";
}


print <<'__END';
/*** THIS FILE WAS GENERATED BY ledpats.pl -- DO NOT EDIT. ***/
/*
 *  ledpats.c  --  generated C array of XT1000 16-segment LED patterns
 *
 *  Copyright 1999-2001 Tensilica Inc.
 */
#ifndef XT1000_LEDPATS_H
#define XT1000_LEDPATS_H

/*
 *	LED 16-segment display bit numbers, from 0 to f (hex):
 *  (dot is always displayed)
 *
 *      - -    0 1                            x,x
 *     |\|/|  789a2                          xxxxx
 *      - -    f b      represented as:       x,x   where x=0 (on) or 1 (off)
 *     |/|\|  6edc3                          xxxxx
 *      - - .  5 4 .                          x,x
 */


/*
 *  Define all visible ASCII character patterns for the
 *  single on-board 16-segment LED.
 */
const unsigned short _LedSegments[] = {

__END
ledrow(' ',    '!',    '"',    '#',    '$',    '%',    '&',    "'",
     '     ','   - ','     ',' - - ',' - - ',' -   ','   - ','     ',
     '     ','  | |','  | |','| |  ','| |  ','| |/ ','  |/ ','   / ',
     '     ','   - ','     ',' - - ',' - - ',' - - ',' -   ','     ',
     '     ','     ','     ','| |  ','  | |',' /| |','| |\|','     ',
     '     ','   - ','     ','     ',' - - ','   - ',' -   ','     ');

ledrow('(',    ')',    '*',    '+',    ',',    '-',    '.',    '/',
     '     ','     ','     ','     ','     ','     ','     ','     ',
     '   / ',' \   ',' \|/ ','  |  ','     ','     ','     ','   / ',
     '     ','     ',' - - ',' - - ','     ',' - - ','     ','     ',
     '   \ ',' /   ',' /|\ ','  |  ',' /   ','     ','     ',' /   ',
     '     ','     ','     ','     ','     ','     ',' -   ','     ');

ledrow('0',    '1',    '2',    '3',    '4',    '5',    '6',    '7',
     ' - - ','     ',' - - ',' - - ','     ',' - - ',' - - ',' - - ',
     '|  /|','    |','    |','    |','|   |','|    ','|    ','    |',
     '     ','     ',' - - ',' - - ',' - - ',' - - ',' - - ','     ',
     '|/  |','    |','|    ','    |','    |','    |','|   |','    |',
     ' - - ','     ',' - - ',' - - ','     ',' - - ',' - - ','     ');

ledrow('8',    '9',    ':',    ';',    '<',    '=',    '>',    '?',
     ' - - ',' - - ',' -   ',' -   ','     ','     ','     ',' - - ',
     '|   |','|   |','     ','     ','   / ','     ',' \   ','    |',
     ' - - ',' - - ','     ','     ','     ',' - - ','     ','   - ',
     '|   |','    |','     ',' /   ',' /   ','     ','   \ ','  |  ',
     ' - - ',' - - ',' -   ','     ',' - - ',' - - ',' - - ','     ');

ledrow('@',    'A',    'B',    'C',    'D',    'E',    'F',    'G',
     ' - - ',' - - ',' - - ',' - - ','     ',' - - ',' - - ',' - - ',
     '|  /|','|   |','|  / ','|    ','|\   ','|    ','|    ','|    ',
     '   - ',' - - ',' - - ','     ','     ',' - - ',' - - ','   - ',
     '|    ','|   |','|   |','|    ','|/   ','|    ','|    ','|  \ ',
     ' - - ','     ',' - - ',' - - ','     ',' - - ','     ',' - - ');

ledrow('H',    'I',    'J',    'K',    'L',    'M',    'N',    'O',
     '     ',' - - ','   - ','     ','     ','     ','     ',' - - ',
     '|   |','  |  ','    |','|  / ','|    ','|\ /|','|\  |','|   |',
     ' - - ','     ','     ',' -   ','     ','     ','     ','     ',
     '|   |','  |  ','|   |','|  \ ','|    ','|   |','|  \|','|   |',
     '     ',' - - ',' - - ','     ',' - - ','     ','     ',' - - ');

ledrow('P',    'Q',    'R',    'S',    'T',    'U',    'V',    'W',
     ' - - ',' - - ',' - - ',' - - ',' - - ','     ','     ','     ',
     '|   |','|   |','|   |','|    ','  |  ','|   |','|  / ','| | |',
     ' - - ','     ',' - - ',' -   ','     ','     ','     ','     ',
     '|    ','|  \|','|  \ ','   \ ','  |  ','|   |','|/   ','|/ \|',
     '     ',' - - ','     ',' - - ','     ',' - - ','     ','     ');

ledrow('X',    'Y',    'Z',    '[',    '\\',    ']',    '^',    '_',
     '     ','     ',' - - ',' -   ','     ','   - ',' -   ','     ',
     ' \ / ',' \ / ','   / ','|    ',' \   ','    |','| |  ','     ',
     '     ','     ','     ','     ','     ','     ','     ','     ',
     ' / \ ','  |  ',' /   ','|    ','   \ ','    |','     ','     ',
     '     ','     ',' - - ',' -   ','     ','   - ','     ',' - - ');

ledrow('`',    'a',    'b',    'c',    'd',    'e',    'f',    'g',
     '     ','     ','     ','     ','     ','     ',' -   ',' -   ',
     ' \   ','     ','|    ','     ','  |  ','     ','|    ','| |  ',
     '     ',' -   ',' -   ',' -   ',' -   ',' -   ',' -   ',' -   ',
     '     ',' /|  ','| |  ','|    ','| |  ','|/   ','|    ','  |  ',
     '     ',' - - ',' -   ',' -   ',' -   ',' -   ','     ',' -   ');

ledrow('h',    'i',    'j',    'k',    'l',    'm',    'n',    'o',
     '     ','     ','     ','     ','     ','     ','     ','     ',
     '|    ','     ','  |  ','  |  ','  |  ','     ','     ','     ',
     ' -   ','     ','     ','   - ','     ',' - - ',' -   ',' -   ',
     '| |  ','  |  ','| |  ','  |\ ','  |  ','| | |','| |  ','| |  ',
     '     ','     ',' -   ','     ','   - ','     ','     ',' -   ');

ledrow('p',    'q',    'r',    's',    't',    'u',    'v',    'w',
     ' -   ',' -   ','     ',' -   ','     ','     ','     ','     ',
     '| |  ','| |  ','     ','|    ','  |  ','     ','     ','     ',
     ' -   ',' -   ',' -   ',' -   ','   - ','     ','     ','     ',
     '|    ','  |  ','|    ','  |  ','  |  ','| |  ','|/   ','|/ \|',
     '     ','     ','     ',' -   ','   - ',' -   ','     ','     ');

ledrow('x',    'y',    'z',    '{',    '|',    '}',    '~',   'del',
     '     ','     ','     ',' -   ','     ','   - ','     ','     ',
     '  |/ ',' \ / ','     ',' \   ','  |  ','   / ','|\ / ','     ',
     '     ','     ',' -   ',' -   ','     ','   - ','     ','     ',
     ' /|  ',' /   ',' /   ',' /   ','  |  ','   \ ','     ',' / \ ',
     '     ','     ',' -   ',' -   ','     ','   - ','     ',' - - ');

#ledrow('X',    'X',    'X',    'X',    'X',    'X',    'X',    'X',
#     ' - - ',' - - ',' - - ',' - - ',' - - ',' - - ',' - - ',' - - ',
#     '|\|/|','|\|/|','|\|/|','|\|/|','|\|/|','|\|/|','|\|/|','|\|/|',
#     ' - - ',' - - ',' - - ',' - - ',' - - ',' - - ',' - - ',' - - ',
#     '|/|\|','|/|\|','|/|\|','|/|\|','|/|\|','|/|\|','|/|\|','|/|\|',
#     ' - - ',' - - ',' - - ',' - - ',' - - ',' - - ',' - - ',' - - ');

print <<'__END';
};


/*
 *  Define rotating hourglass LED sequence:
 */
const unsigned short _LedRotate[] = {

__END
ledrow('1',    '2',    '3',    '4',    '5',  
     ' - - ','   - ','     ','     ',' -   ',
     ' \ / ','  |/ ','   /|','|\   ',' \|  ',
     '     ','     ',' - - ',' - - ','     ',
     ' / \ ',' /|  ','|/   ','   \|','  |\ ',
     ' - - ',' -   ','     ','     ','   - ');
print <<'__END';
};

#endif /*XT1000_LEDPATS_H*/
__END

exit 0;

